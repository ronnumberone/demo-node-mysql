<style>
    /* form login/logup */
.main {
    background: #f1f1f1;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    background-image: url(img/background-login.png);
    background-repeat: no-repeat;
    background-size: cover;
    background-position: center;
    padding-top: 60px;
}

.modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #000000;
    opacity: 0.5;
}

.back-to-home {
    font-size: 1.6rem;
    color: #333;
    font-weight: 600;
}

.back-to-home i {
    font-size: 2rem;
    color: black;
}

.form {
    width: 450px;
    min-height: 100px;
    padding: 32px 24px;
    text-align: center;
    background-color: rgba(255, 255, 255, 0.586);
    backdrop-filter: blur(10px);
    border-radius: 2px;
    margin: 50px 24px;
    align-self: center;
    box-shadow: 0 2px 5px 0 rgba(51, 62, 73, 0.1);
    z-index: 99;
}

.form .heading {
    font-size: 2rem;
    color: #207115;
}

.form .heading span {
    flex-grow: 0.75;
}

.form .desc {
    text-align: center;
    color: #636d77;
    font-size: 1.6rem;
    font-weight: lighter;
    line-height: 2.4rem;
    margin-top: 16px;
    font-weight: 300;
}

.form-group {
    display: flex;
    margin-bottom: 22px;
    flex-direction: column;
}

.form-label,
.form-message {
    text-align: left;
}

.form-label {
    font-weight: 500;
    padding-bottom: 6px;
    line-height: 1.8rem;
    font-size: 1.2rem;
}

.form-control {
    height: 60px;
    padding: 8px 12px;
    border: 1px solid #b3b3b3;
    border-radius: 3px;
    outline: none;
    font-size: 1.1rem;
}

.form-control:hover {
    border-color: #207115;
}

.form-group.invalid .form-control {
    border-color: #f33a58;
}

.form-group.invalid .form-message {
    color: #f33a58;
}

.form-message {
    font-size: 1rem;
    line-height: 1.6rem;
    padding: 4px 0 0;
}

.form-submit {
    outline: none;
    background-color: #1b6312;
    margin-top: 12px;
    padding: 12px 16px;
    font-weight: 600;
    color: #fff;
    border: none;
    width: 100%;
    font-size: 16px;
    border-radius: 8px;
    cursor: pointer;
}

.form-submit:hover {
    background-color: #207115;
}

.spacer {
    margin-top: 36px;
}

.form-group-fb {
    padding: 8px 12px;
    background-color: #1877f2;
    border-radius: 10px;
    cursor: pointer;
}

.form-group-gg {
    padding: 8px 12px;
    background-color: white;
    border-radius: 10px;
    cursor: pointer;
    border: 1px solid #aaaaaa;
}

.form-group-fb-icon,
.form-group-gg-icon {
    width: 30px;
    height: 30px;
    z-index: 99;
    background-position: left;
    background-repeat: no-repeat;
    background-size: contain;
    margin-left: 10px;
}

.form-group-fb-icon p {
    width: 600%;
    transform: translate(30%, 45%);
    font-size: 1.3rem;
    color: white;
    font-weight: 500;
}

.form-group-gg-icon p {
    width: 600%;
    transform: translate(30%, 45%);
    font-size: 1.3rem;
    color: #333;
    font-weight: 500;
}

.form-group-suggest {
    margin: 20px 0 10px;
}

.form-group-suggest p {
    font-size: 1.2rem;
    color: #333;
}

.form-group-suggest p a {
    font-weight: 600;
    color: #1b6312;
    font-size: 1.23rem;
}
</style>

<div class="main">
    <div class="modal"></div>

    <form action="/me/store" method="POST" class="form" id="form-1">
        <h3 class="heading">
            <span>Đăng ký</span>
        </h3>

        <div class="spacer"></div>

        {{#if duplicate}}
        <div class="form-group invalid">
            <label for="userName" class="form-label">Tên người dùng</label>
            <input id="userName" name="userName" rules="required" type="text" placeholder="VD: Gia Hoàng"
                class="form-control">
            <span class="form-message">Tên người dùng đã tồn tại</span>
        </div>
        {{/if}}
        {{#unless duplicate}}
        <div class="form-group">
            <label for="userName" class="form-label">Tên người dùng</label>
            <input id="userName" name="userName" rules="required" type="text" placeholder="VD: Gia Hoàng"
                class="form-control">
            <span class="form-message"></span>
        </div>
        {{/unless}}

        <div class="form-group">
            <label for="password" class="form-label">Mật khẩu</label>
            <input id="password" name="password" rules="required|min:6" type="password" placeholder="Nhập mật khẩu"
                class="form-control">
            <span class="form-message"></span>
        </div>

        <div class="form-group">
            <label for="password_confirmation" class="form-label">Nhập lại mật khẩu</label>
            <input id="password_confirmation" name="password_confirmation" rules="required|isConfirmed"
                placeholder="Nhập lại mật khẩu" type="password" class="form-control">
            <span class="form-message"></span>
        </div>

        <button class="form-submit">Đăng ký</button>

        <div class="spacer"></div>

        <div class="form-group form-group-suggest">
            <p>Bạn đã có tài khoản?
                <a href="/me/login">Đăng nhập</a>
            </p>
        </div>

    </form>

</div>

<script>
    function Validator(formSelector) {

        var formRules = {};
        var _this = this;

        //Lấy ra mật khẩu
        var password = document.querySelector(formSelector + ' #password');

        function getParent(element, selector) {
            while (element.parentElement) {
                if (element.parentElement.matches(selector)) {
                    return element.parentElement;
                }
                element = element.parentElement;
            }
        };

        /**
         * Quy ước tạo rule:
         * - Nếu lỗi thì return `error message`
         * - Nếu không có lỗi thì return `undefined` 
         */
        var validatorRules = {
            required: function (value) {
                return value ? undefined : 'Vui lòng không để trống';
            },
            email: function (value) {
                var regex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
                return regex.test(value) ? undefined : 'Vui lòng nhập đúng email';
            },
            min: function (min) {
                return function (value) {
                    return value.length >= min ? undefined : `Vui lòng nhập tối thiểu ${min} ký tự`;
                }
            },
            isConfirmed: function (value) {
                return value === password.value ? undefined : 'Nhập lại sai mật khẩu';
            }
        };

        //Lấy ra form element trong DOM theo 'formSelector'
        var formElement = document.querySelector(formSelector);

        //Chỉ xử lý khi có element trong DOM
        if (formElement) {

            var inputs = formElement.querySelectorAll('[name][rules]');
            for (var input of inputs) {

                var rules = input.getAttribute('rules').split('|');

                for (var rule of rules) {

                    var isRuleHasValue = rule.includes(':');
                    var ruleInfo;

                    if (isRuleHasValue) {
                        ruleInfo = rule.split(':');
                        rule = ruleInfo[0];
                    }

                    var ruleFunc = validatorRules[rule];

                    if (isRuleHasValue) {
                        ruleFunc = ruleFunc(ruleInfo[1]);
                    }

                    if (Array.isArray(formRules[input.name])) {
                        formRules[input.name].push(ruleFunc);
                    } else {
                        formRules[input.name] = [ruleFunc];
                    }
                }

                //Lắng nghe sự kiện để validate (blur, onchange...)
                input.onblur = handleValidate;
                input.oninput = handleClearError;
            }

            function handleValidate(event) {
                var rules = formRules[event.target.name];
                var errorMessage;

                for (var rule of rules) {
                    errorMessage = rule(event.target.value);
                    if (errorMessage) break;
                }
                if (errorMessage) {
                    var formGroup = getParent(event.target, '.form-group');
                    if (formGroup) {
                        formGroup.classList.add('invalid');
                        var formMessage = formGroup.querySelector('.form-message');
                        if (formMessage) {
                            formMessage.innerText = errorMessage;
                        }
                    }
                };
                return !errorMessage;

            }

            //Hàm clear message lỗi
            function handleClearError(event) {
                var formGroup = getParent(event.target, '.form-group');
                if (formGroup.classList.contains('invalid')) {
                    formGroup.classList.remove('invalid');
                    var formMessage = formGroup.querySelector('.form-message');
                    if (formMessage) {
                        formMessage.innerText = '';
                    }
                }
            }

            //Xủ lý hành vi submit form
            formElement.onsubmit = function (event) {
                event.preventDefault();

                var inputs = formElement.querySelectorAll('[name][rules]');
                var isValid = true;

                for (var input of inputs) {
                    if (!handleValidate({ target: input })) {
                        isValid = false;
                    }
                }

                //Khi không có lỗi thì submit form
                if (isValid) {
                    if (typeof _this.onSubmit === 'function') {

                        var enableInputs = formElement.querySelectorAll('[name]');

                        var formValues = Array.from(enableInputs).reduce(function (values, input) {
                            switch (input.type) {
                                case 'radio':
                                    values[input.name] = formElement.querySelector('input[name="' + input.name + '"]:checked').value;
                                    break;
                                case 'checkbox':
                                    if (!input.matches(':checked')) {
                                        values[input.name] = '';
                                        return values;
                                    }
                                    if (!Array.isArray(values[input.name])) {
                                        values[input.name] = [];
                                    }

                                    values[input.name].push(input.value);

                                    break;
                                case 'file':
                                    values[input.name] = input.files;
                                    break;
                                default:
                                    values[input.name] = input.value;
                            }
                            return values;
                        }, {});

                        //Gọi lại hàm onSubmit và trả về giá trị của form
                        _this.onSubmit(formValues);
                    } else {
                        formElement.submit();
                    }
                }
            }
        }
    }
    var form = new Validator('#form-1');
</script>